on: push

jobs:
  build-unit-test-runner-macos:
    runs-on: 'macos-latest'
    steps:
    - uses: actions/checkout@v3
    - uses: ./.github/actions/build-project
      with:
        name: UnitTestRunner
        dir: extras
        target: macos

  # build-macos-projects:
  #   if: false
  #   needs: find-projects
  #   strategy:
  #     matrix:
  #       project: ${{ fromJson(needs.find-projects.outputs.macos-projects) }}
  #   name: ${{ matrix.project }}
  #   runs-on: 'macos-latest'
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./.github/actions/build-xcode-project
  #       with:
  #         project: ${{ matrix.project }}

  # build-linux-projects:
  #   needs: find-projects
  #   strategy:
  #     matrix:
  #       project: ${{ fromJson(needs.find-projects.outputs.linux-projects) }}
  #   name: ${{ matrix.project }}
  #   runs-on: 'ubuntu-latest'
  #   steps:
  #     - name: 'Install Linux Dependencies'
  #       run: |
  #         sudo apt install \
  #           libasound2-dev \
  #           libjack-jackd2-dev \
  #           ladspa-sdk \
  #           libcurl4-openssl-dev  \
  #           libfreetype6-dev \
  #           libx11-dev \
  #           libxcomposite-dev \
  #           libxcursor-dev \
  #           libxcursor-dev \
  #           libxext-dev \
  #           libxinerama-dev \
  #           libxrandr-dev \
  #           libxrender-dev \
  #           libwebkit2gtk-4.0-dev \
  #           libglu1-mesa-dev \
  #           mesa-common-dev
  #     - uses: actions/checkout@v3
  #     - run: make -j$(nproc) CONFIG=Release V=1 CXXFLAGS="-Werror" -C ${{ matrix.project }}

  # build-android-projects:
  #   needs: find-projects
  #   strategy:
  #     matrix:
  #       project: ${{ fromJson(needs.find-projects.outputs.android-projects) }}
  #   name: ${{ matrix.project }}
  #   runs-on: 'ubuntu-latest'
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         cd ${{ matrix.project }}
  #         ./gradlew --parallel --max-workers=$(nproc) assembleRelease

  # build-ios-projects:
  #   needs: find-projects
  #   strategy:
  #     matrix:
  #       project: ${{ fromJson(needs.find-projects.outputs.ios-projects) }}
  #   runs-on: 'macos-latest'
  #   name: ${{ matrix.project }}
  #   steps:
  #     - name: Install a signing certificate
  #       env:
  #         CERTIFICATE_BASE64: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
  #         CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
  #         KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
  #       run: |
  #         CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
  #         KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
  #         echo -n "$CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
  #         security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
  #         security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
  #         security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
  #         security list-keychain -d user -s $KEYCHAIN_PATH
  #     - name: Install a provisioning profile
  #       env:
  #         PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
  #       run: |
  #         PROFILES_DIR="~/Library/MobileDevice/Provisioning Profiles"
  #         mkdir -p "$PROFILES_DIR"
  #         echo -n "$PROFILE_BASE64" | base64 --decode -o "$PROFILES_DIR/profile.mobileprovision"
  #     - uses: actions/checkout@v3
  #     - name: Build
  #       env:
  #         TEAM_ID: ${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}
  #       run: |
  #         xcodebuild -project ${{ matrix.project }} \
  #                    -configuration Release \
  #                    -allowProvisioningUpdates \
  #                    GCC_TREAT_WARNINGS_AS_ERRORS=YES \
  #                    DEVELOPMENT_TEAM="$TEAM_ID"

  # build-

  # build-cmake-examples:
  #   strategy:
  #     matrix:
  #       os: ['macos-latest', 'ubuntu-latest', 'windows-latest']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - if: runner.os == 'Linux'
  #     name: 'Install Linux Dependencies'
  #     run: |
  #       sudo apt install libasound2-dev libjack-jackd2-dev \
  #       ladspa-sdk \
  #       libcurl4-openssl-dev  \
  #       libfreetype6-dev \
  #       libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
  #       libwebkit2gtk-4.0-dev \
  #       libglu1-mesa-dev mesa-common-dev

  #   - name: Generate Projects
  #     run: cmake . -B cmake-build -DJUCE_BUILD_EXAMPLES=ON

  #   - name: Build projects
  #     run: cmake --build cmake-build

