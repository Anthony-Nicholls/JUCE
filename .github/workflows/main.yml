on: push

jobs:
  build-macos-projects:
    strategy:
      matrix:
        project: [
          {dir: examples, name: DemoRunner},
          {dir: extras, name: AudioPerformanceTest},
          {dir: extras, name: AudioPluginHost},
          {dir: extras, name: BinaryBuilder},
          {dir: extras, name: NetworkGraphicsDemo},
          {dir: extras, name: Projucer},
          {dir: extras, name: UnitTestRunner},
        ]
    name: Build ${{ matrix.project.name }} (macOS)
    runs-on: 'macos-latest'
    env:
      PROJECT_PATH: ./${{ matrix.project.dir }}/${{ matrix.project.name }}/Builds/MacOSX
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build project
        working-directory: ${{ env.PROJECT_PATH }}
        run: xcodebuild -configuration Release GCC_TREAT_WARNINGS_AS_ERRORS=YES
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project.name }}-macOS
          path: ${{ env.PROJECT_PATH }}/build/Release

  # build-ios-projects:
  #   strategy:
  #     matrix:
  #       project: [
  #         {dir: examples, name: DemoRunner}
  #       ]
  #   name: Build ${{ matrix.project.name }} (iOS)
  #   runs-on: 'macos-latest'
  #   env:
  #     PROJECT_PATH: ./${{ matrix.project.dir }}/${{ matrix.project.name }}/Builds/iOS/${{ matrix.project.name }}.xcodeproj
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Install certificate
  #       uses: ./.github/actions/install-apple-signing-cert
  #       with:
  #         certificate-base64: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
  #         certificate-password: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
  #     - name: Install provisioning profile
  #       uses: ./.github/actions/install-ios-provisioning-profile
  #       with:
  #         profile-base64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
  #     - name: Build project
  #       run: |
  #         xcodebuild -project ${PROJECT_PATH} \
  #                    -configuration Release \
  #                    -allowProvisioningUpdates \
  #                    GCC_TREAT_WARNINGS_AS_ERRORS=YES \
  #                    DEVELOPMENT_TEAM="${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}"
  #     - name: Upload build
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ matrix.project.name }}-iOS
  #         path: ${PROJECT_PATH}/build/Release

  build-linux-projects:
    strategy:
      matrix:
        project: [
          {dir: examples, name: DemoRunner},
          {dir: extras, name: AudioPerformanceTest},
          {dir: extras, name: AudioPluginHost},
          {dir: extras, name: BinaryBuilder},
          {dir: extras, name: NetworkGraphicsDemo},
          {dir: extras, name: Projucer},
          {dir: extras, name: UnitTestRunner},
        ]
    name: Build ${{ matrix.project.name }} (Linux)
    runs-on: 'ubuntu-latest'
    env:
      PROJECT_PATH: ./${{ matrix.project.dir }}/${{ matrix.project.name }}/Builds/LinuxMakefile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/install-linux-dependencies
      - name: Build project
        working-directory: ${{ env.PROJECT_PATH }}
        run: make -j$(nproc) CONFIG=Release V=1 CXXFLAGS="-Werror"
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project.name }}-Linux
          path: ${{ env.PROJECT_PATH }}/build/intermediate/Release

  # build-android-projects:
  #   strategy:
  #     matrix:
  #       project: [
  #         {dir: examples, name: DemoRunner}
  #       ]
  #   name: Build ${{ matrix.project.name }} (Android)
  #   runs-on: 'ubuntu-latest'
  #   env:
  #     PROJECT_PATH: ./${{ matrix.project.dir }}/${{ matrix.project.name }}/Builds/LinuxMakefile
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Build project
  #       run: |
  #         cd ${{ matrix.project }}
  #         ./gradlew --parallel --max-workers=$(nproc) assembleRelease

  genrate-cmake-projects:
    strategy:
      matrix:
        os: ['macos-latest', 'ubuntu-latest', 'windows-latest']
    name: Generate CMake (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - if: runner.os == 'Linux'
        name: Install dependencies
        uses: ./.github/actions/install-linux-dependencies
      - name: Generate Projects
        run: cmake . -B cmake-build -DJUCE_BUILD_EXAMPLES=ON -DJUCE_BUILD_EXTRAS=ON
      - name: Cache cmake-build
        uses: actions/cache@v3
        with:
          path: cmake-build
          key: cmake-build-${{ runner.os }}-${{ github.sha }}

  build-cmake-projects:
    needs: genrate-cmake-projects
    strategy:
      matrix:
        os: ['macos-latest', 'ubuntu-latest', 'windows-latest']
        target: ['AudioPerformanceTest',
                 'AudioPluginHost',
                 'BinaryBuilder',
                 'DemoRunner',
                 'NetworkGraphicsDemo',
                 'Projucer',
                 'UnitTestRunner',
                 'AudioPluginExample',
                 'ConsoleAppExample',
                 'GuiAppExample']
    name: Build CMake ${{ matrix.target }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - if: runner.os == 'Linux'
        name: Install dependencies
        uses: ./.github/actions/install-linux-dependencies
      - name: Restore cmake-build cache
        uses: actions/cache@v3
        with:
          path: cmake-build
          key: cmake-build-${{ runner.os }}-${{ github.sha }}
      - name: Build projects
        run: cmake --build cmake-build --target ${{ matrix.target }}
