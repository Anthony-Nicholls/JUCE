on: push

jobs:
  build-macos-projects:
    strategy:
      matrix:
        project: [
          {dir: examples, name: DemoRunner},
          {dir: extras, name: AudioPluginHost},
          {dir: extras, name: UnitTestRunner},
        ]
    name: Build ${{ matrix.project.name }} (macOS)
    runs-on: 'macos-latest'
    env:
      PROJECT_PATH: ./${{ matrix.project.dir }}/${{ matrix.project.name }}/Builds/MacOSX/${{ matrix.project.name }}.xcodeproj
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build project
        run: |
          xcodebuild -project ${PROJECT_PATH} \
                     -configuration Release \
                     GCC_TREAT_WARNINGS_AS_ERRORS=YES
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project.name }}-macOS
          path: ${PROJECT_PATH}/build/Release

  build-ios-projects:
    strategy:
      matrix:
        project: [
          {dir: examples, name: DemoRunner}
        ]
    name: Build ${{ matrix.project.name }} (iOS)
    runs-on: 'macos-latest'
    env:
      PROJECT_PATH: ./${{ matrix.project.dir }}/${{ matrix.project.name }}/Builds/iOS/${{ matrix.project.name }}.xcodeproj
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install certificate
        uses: ./.github/actions/install-apple-signing-cert
        with:
          certificate-base64: ${{ secrets.APPLE_SIGNING_CERTIFICATE_BASE64 }}
          certificate-password: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
      - name: Install provisioning profile
        uses: ./.github/actions/install-ios-provisioning-profile
        with:
          profile-base64: ${{ secrets.APPLE_PROVISIONING_PROFILE_BASE64 }}
      - name: Build project
        run: |
          xcodebuild -project ${PROJECT_PATH} \
                     -configuration Release \
                     -allowProvisioningUpdates \
                     GCC_TREAT_WARNINGS_AS_ERRORS=YES \
                     DEVELOPMENT_TEAM="${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}"
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project.name }}-iOS
          path: ${PROJECT_PATH}/build/Release

  build-linux-projects:
    strategy:
      matrix:
        project: [
          {dir: examples, name: DemoRunner},
          {dir: extras, name: AudioPluginHost},
          {dir: extras, name: UnitTestRunner},
        ]
    name: Build ${{ matrix.project.name }} (Linux)
    runs-on: 'ubuntu-latest'
    env:
      PROJECT_PATH: ./${{ matrix.project.dir }}/${{ matrix.project.name }}/Builds/LinuxMakefile
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies
        uses: ./.github/actions/install-linux-dependencies
      - name: Build project
        run: make -j$(nproc) CONFIG=Release V=1 CXXFLAGS="-Werror" -C ${PROJECT_PATH}
      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project.name }}-Linux
          path: ${PROJECT_PATH}/build/intermediate/Release

  # build-android-projects:
  #   needs: find-projects
  #   strategy:
  #     matrix:
  #       project: ${{ fromJson(needs.find-projects.outputs.android-projects) }}
  #   name: ${{ matrix.project }}
  #   runs-on: 'ubuntu-latest'
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         cd ${{ matrix.project }}
  #         ./gradlew --parallel --max-workers=$(nproc) assembleRelease

  # build-cmake-examples:
  #   strategy:
  #     matrix:
  #       os: ['macos-latest', 'ubuntu-latest', 'windows-latest']
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #   - if: runner.os == 'Linux'
  #     name: 'Install Linux Dependencies'
  #     run: |
  #       sudo apt install libasound2-dev libjack-jackd2-dev \
  #       ladspa-sdk \
  #       libcurl4-openssl-dev  \
  #       libfreetype6-dev \
  #       libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev \
  #       libwebkit2gtk-4.0-dev \
  #       libglu1-mesa-dev mesa-common-dev

  #   - name: Generate Projects
  #     run: cmake . -B cmake-build -DJUCE_BUILD_EXAMPLES=ON

  #   - name: Build projects
  #     run: cmake --build cmake-build

